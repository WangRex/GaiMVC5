//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 2012-12-25 15:31:19 by HD
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using Microsoft.Practices.Unity;
using Apps.BLL;
using Apps.Common;
using Apps.Models;
using Apps.Models.Sys;
using Apps.Web.Core;
using Apps.Locale;
using Apps.BLL.Sys;
using System;

namespace Apps.Web.Controllers
{
    public class SysModuleController : BaseController
    {
        /// <summary>
        /// 业务层注入
        /// </summary>

        public SysModuleBLL m_BLL = new SysModuleBLL();
        public SysModuleOperateBLL operateBLL = new SysModuleOperateBLL();
        ValidationErrors errors = new ValidationErrors();

        /// <summary>
        /// 主页
        /// </summary>
        /// <returns>视图</returns>
        //[SupportFilter]
        public ActionResult Index()
        {
            
            return View();

        }

        public ActionResult IconList()
        {
            return View();
        }

        [HttpPost]
        ////[SupportFilter(ActionName = "Index")]
        public JsonResult GetOptListByModule(GridPager pager, string mid)
        {
            if (string.IsNullOrEmpty(mid))
            {
                return Json(string.Empty);
            }
            else
            {
                pager.rows = 1000;
                pager.page = 1;
                List<SysModuleOperate> list = operateBLL.m_Rep.FindPageList(ref pager, a => a.ModuleId == mid).ToList();
                var json = new
                {
                    total = pager.totalRows,
                    rows = list

                };
                return Json(json);
            }


        }

        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="pager">分页</param>
        /// <param name="queryStr">查询条件</param>
        /// <returns></returns>
        ////[SupportFilter(ActionName = "Index")]
        [HttpPost]
        public JsonResult GetList(string id)
        {
            if (id == null)
                id = "0";
            List<SysModule> list = m_BLL.m_Rep.FindList(a => a.ParentId == id).ToList();
            var json = from r in list
                       select new SysModule()
                       {
                           Id = r.Id,
                           Name = r.Name,
                           EnglishName = r.EnglishName,
                           ParentId = r.ParentId,
                           Url = r.Url,
                           Iconic = r.Iconic,
                           Sort = r.Sort,
                           Remark = r.Remark,
                           Enable = r.Enable,
                           CreatePerson = r.CreatePerson,
                           CreateTime = r.CreateTime,
                           IsLast = r.IsLast,
                           state = (m_BLL.exitChild(r.Id.ToString())) ? "closed" : "open"
                       };


            return Json(json);
        }


        #region 创建模块
        //////[SupportFilter]
        public ActionResult Create(string id)
        {

            SysModule entity = new SysModule()
            {
                ParentId = id,
                Iconic = "fa fa-puzzle-piece",
                Enable = "true",
                Sort = "0"
            };
            return View(entity);
        }

        [HttpPost]
        //////[SupportFilter]
        public JsonResult Create(SysModule model)
        {
            model.CreateTime = ResultHelper.NowTime.ToString("yyyy-MM-dd HH:mm:ss");
            model.CreatePerson = GetUserId();
            if (model != null)
            {
                if (m_BLL.m_Rep.Create(model))
                {
                    if (!string.IsNullOrEmpty(model.Url))
                    {
                        //List<SysModuleOperate> entitys = new List<SysModuleOperate>();
                        //entitys.Add(new SysModuleOperate() { Name = "创建", KeyCode = "Create", ModuleId = model.Id.ToString(), IsValid = "true", Sort = "1" });
                        //entitys.Add(new SysModuleOperate() { Name = "更新", KeyCode = "Edit", ModuleId = model.Id.ToString(), IsValid = "true", Sort = "2" });
                        //entitys.Add(new SysModuleOperate() { Name = "删除", KeyCode = "Delete", ModuleId = model.Id.ToString(), IsValid = "true", Sort = "3" });
                        //entitys.Add(new SysModuleOperate() { Name = "查询", KeyCode = "Query", ModuleId = model.Id.ToString(), IsValid = "true", Sort = "4" });
                        //entitys.Add(new SysModuleOperate() { Name = "详情", KeyCode = "Details", ModuleId = model.Id.ToString(), IsValid = "true", Sort = "5" });
                        //entitys.Add(new SysModuleOperate() { Name = "审批", KeyCode = "Allot", ModuleId = model.Id.ToString(), IsValid = "true", Sort = "6" });
                        //foreach (SysModuleOperate entity in entitys)
                        //{
                        //    operateBLL.m_Rep.Create(entity);
                        //}
                    }
                    LogHandler.WriteServiceLog(GetUserId(), "Id" + model.Id + ",Name" + model.Name, "成功", "创建", "SysModule");
                    return Json(JsonHandler.CreateMessage(1, Resource.InsertSucceed));
                }
                else
                {
                    string ErrorCol = errors.Error;
                    LogHandler.WriteServiceLog(GetUserId(), "Id" + model.Id + ",Name" + model.Name + "," + ErrorCol, "失败", "创建", "SysModule");
                    return Json(JsonHandler.CreateMessage(0, Resource.InsertFail + ErrorCol));
                }
            }
            else
            {
                return Json(JsonHandler.CreateMessage(0, Resource.InsertFail));
            }
        }
        #endregion

        #region 创建权限操作码授权表
        ////[SupportFilter(ActionName = "Create")]
        public ActionResult CreateOpt(string moduleId)
        {

            SysModuleOperate sysModuleOptModel = new SysModuleOperate();
            sysModuleOptModel.ModuleId = moduleId;
            sysModuleOptModel.IsValid = "true";
            return View(sysModuleOptModel);
        }


        [HttpPost]
        ////[SupportFilter(ActionName = "Create")]
        public JsonResult CreateOpt(SysModuleOperate info)
        {
            if (info != null)
            {
                SysModuleOperate entity = operateBLL.m_Rep.Find(info.Id);
                if (entity != null)
                    return Json(JsonHandler.CreateMessage(0, Resource.PrimaryRepeat), JsonRequestBehavior.AllowGet);
                entity = new SysModuleOperate();
                entity.Name = info.Name;
                entity.KeyCode = info.KeyCode;
                entity.ModuleId = info.ModuleId;
                entity.IsValid = info.IsValid;
                entity.Sort = info.Sort;

                if (operateBLL.m_Rep.Create(entity))
                {
                    LogHandler.WriteServiceLog(GetUserId(), "Id:" + info.Id + ",Name:" + info.Name, "成功", "创建", "模块设置");
                    return Json(JsonHandler.CreateMessage(1, Resource.InsertSucceed), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string ErrorCol = errors.Error;
                    LogHandler.WriteServiceLog(GetUserId(), "Id:" + info.Id + ",Name:" + info.Name + "," + ErrorCol, "失败", "创建", "模块设置");
                    return Json(JsonHandler.CreateMessage(0, Resource.InsertFail + ErrorCol), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(JsonHandler.CreateMessage(0, Resource.InsertFail), JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        #region 修改模块
        //////[SupportFilter]
        public ActionResult Edit(int id)
        {

            SysModule entity = m_BLL.m_Rep.Find(id);
            return View(entity);
        }

        [HttpPost]
        //////[SupportFilter]
        public JsonResult Edit(SysModule model)
        {
            if (model != null)
            {
                if (m_BLL.m_Rep.Update(model))
                {
                    LogHandler.WriteServiceLog(GetUserId(), "Id" + model.Id + ",Name" + model.Name, "成功", "修改", "系统菜单");
                    return Json(JsonHandler.CreateMessage(1, Resource.EditSucceed));
                }
                else
                {
                    string ErrorCol = errors.Error;
                    LogHandler.WriteServiceLog(GetUserId(), "Id" + model.Id + ",Name" + model.Name + "," + ErrorCol, "失败", "修改", "系统菜单");
                    return Json(JsonHandler.CreateMessage(0, Resource.EditFail + ":" + ErrorCol));
                }
            }
            else
            {
                return Json(JsonHandler.CreateMessage(0, Resource.EditFail));
            }
        }
        #endregion

        #region 删除
        [HttpPost]
        //////[SupportFilter]
        public JsonResult Delete(string id)
        {
            if (!string.IsNullOrWhiteSpace(id))
            {
                if (m_BLL.m_Rep.Delete(Convert.ToInt16(id))>0)
                {
                    LogHandler.WriteServiceLog(GetUserId(), "Ids:" + id, "成功", "删除", "模块设置");
                    return Json(JsonHandler.CreateMessage(1, Resource.DeleteSucceed), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string ErrorCol = errors.Error;
                    LogHandler.WriteServiceLog(GetUserId(), "Id:" + id + "," + ErrorCol, "失败", "删除", "模块设置");
                    return Json(JsonHandler.CreateMessage(0, Resource.DeleteFail + ErrorCol), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(JsonHandler.CreateMessage(0, Resource.DeleteFail), JsonRequestBehavior.AllowGet);
            }


        }


        [HttpPost]
        ////[SupportFilter(ActionName = "Delete")]
        public JsonResult DeleteOpt(string id)
        {
            if (!string.IsNullOrWhiteSpace(id))
            {
                if (operateBLL.m_Rep.Delete(Convert.ToInt16(id)) > 0)
                {
                    LogHandler.WriteServiceLog(GetUserId(), "Id:" + id, "成功", "删除", "模块设置KeyCode");
                    return Json(JsonHandler.CreateMessage(1, Resource.DeleteSucceed), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    string ErrorCol = errors.Error;
                    LogHandler.WriteServiceLog(GetUserId(), "Id:" + id + "," + ErrorCol, "失败", "删除", "模块设置KeyCode");
                    return Json(JsonHandler.CreateMessage(0, Resource.DeleteFail + ErrorCol), JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return Json(JsonHandler.CreateMessage(0, Resource.DeleteFail), JsonRequestBehavior.AllowGet);
            }


        }

        #endregion
    }
}