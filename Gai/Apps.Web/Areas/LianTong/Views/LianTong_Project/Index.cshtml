@using Apps.Web.Core;
@using Apps.Common;
@using Apps.Models.Sys;
@using Apps.Locale;
@model Apps.Models.LianTong.LianTong_ProjectModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Index_Layout.cshtml";

    List<perm> perm = null;
}

<div class="mvctool">
    <div>
        <input type="hidden" id="DepId" />
        部门<input class="easyui-combotree" id="structTree" style="width:150px;height:28px;">
        完成情况<select id="overStatusSelect" class="easyui-combobox" style="width:200px;">
            <option value="">--请选择--</option>
            <option value="未完成">未完成</option>
            <option value="完成">完成</option>
        </select>
        专业<input id="projectPro" class="easyui-textbox" style="width:150px;height:28px;">
        管理员<input id="admin" class="easyui-textbox" style="width:150px;height:28px;">
        负责人<input id="projectManagement" class="easyui-textbox" style="width:150px;height:28px;">
    </div>
    @Html.ToolButton("btnQuery", "fa fa-search", "查询", ref perm, "Query", true)
    @Html.ToolButton("btnAdd", "fa fa-plus", "添加", ref perm, "Create", true)
    @Html.ToolButton("btnSave", "fa fa-save", Resource.Save, ref perm, "Save", true)
    @Html.ToolButton("btnDelete", "fa fa-trash", Resource.Delete, ref perm, "Delete", true)
</div>
<div id="modalwindow" class="easyui-window" data-options="modal:true,closed:true,minimizable:false,shadow:false"></div>
<table id="grid_list"></table>
<div id="Pager"></div>
<script type="text/javascript">
    function SetPosTree(depId, refFlag) {
        $('#posTree').combotree({
            url: '/SysPosition/GetPosListByComTree?depId=' + depId
                 , onSelect: function (node) {
                     $("#PosId").val(node.id);
                 }, onLoadSuccess: function (node, data) { //加载成功选择第一行

                 }
        });
    }
    //分类combotree
    $('#structTree').combotree({
        url: '/SysStruct/GetListByComTree?id=root'
        , onSelect: function (node) {
            $("#DepId").val(node.id);
            $("#PosId").val("");
            $('#posTree').combotree('setValue', "");
            SetPosTree(node.id)
        }, onLoadSuccess: function (node, data) { //加载成功选择第一行

            SetPosTree($("#DepId").val(), true);
        }
    });
    var overStatusCombList = [{ "value": "未完成", "text": "未完成" }, { "value": "完成", "text": "完成" }];
    var projectClassCombList = [{ "value": "设备工程", "text": "设备工程" }, { "value": "线路工程", "text": "线路工程" }, { "value": "转化工程", "text": "转化工程" }, { "value": "驻地网工程", "text": "驻地网工程" }, { "value": "装维工程", "text": "装维工程" }, { "value": "市政工程", "text": "市政工程" }, { "value": "外揽工程", "text": "外揽工程" }, { "value": "移动工程", "text": "移动工程" }];
    var projectProCombList = [{ "value": "---设备工程---", "text": "---设备工程---" }, { "value": "电源专业工程", "text": "电源专业工程" }, { "value": "大客户传输工程", "text": "大客户传输工程" }, { "value": "集客工程", "text": "集客工程" }, { "value": "---线路工程---", "text": "---线路工程---" }, { "value": "主干光缆工程", "text": "主干光缆工程" }, { "value": "配线光缆工程", "text": "配线光缆工程" }, { "value": "管道光缆工程", "text": "管道光缆工程" }, { "value": "--移动工程---", "text": "---移动工程---" }, { "value": "设备工程", "text": "设备工程" }, { "value": "线路工程", "text": "线路工程" }];
    function unitformatterOverStatus(value, rowData, rowIndex) {
        if (value == 0) {
            return;
        }
        for (var i = 0; i < overStatusCombList.length; i++) {
            if (overStatusCombList[i].value == value) {
                return overStatusCombList[i].text;
            }
        }
    };
    function unitformatterprojectClass(value, rowData, rowIndex) {
        if (value == 0) {
            return;
        }
        for (var i = 0; i < projectClassCombList.length; i++) {
            if (projectClassCombList[i].value == value) {
                return projectClassCombList[i].text;
            }
        }
    };
    function unitformatterprojectPro(value, rowData, rowIndex) {
        if (value == 0) {
            return;
        }
        for (var i = 0; i < projectProCombList.length; i++) {
            if (projectProCombList[i].value == value) {
                return projectProCombList[i].text;
            }
        }
    };
    var editRow = undefined;
    $(function () {
        $('#grid_list').datagrid({
            url: '/LianTong_Project/GetList',
            width: SetGridWidthSub(10),
            methord: 'post',
            singleSelect: true,
            height: SetGridHeightSub(45),
            sortName: 'Id',
            sortOrder: 'desc',
            idField: 'Id',
            pageSize: 15,
            pageList: [15, 20, 30, 40, 50],
            pagination: true,
            striped: true,
            nowrap: false,
            columns: [[
                { field: 'Id', title: '@Resource.TitleID', width: 25, hidden: true },
                { field: 'projectNum', title: '@Html.LabelFor(model => model.projectNum)', width: 80, sortable: true },
                { field: 'overStatus', title: '@Html.LabelFor(model => model.overStatus)', width: 80, formatter: unitformatterOverStatus, editor: { type: 'combobox', options: { data: overStatusCombList, valueField: "value", textField: "text" } } },
                { field: 'comment', title: '@Html.LabelFor(model => model.comment)', width: 100, editor: { type: 'validatebox' } },
                { field: 'projectLocatioin', title: '@Html.LabelFor(model => model.projectLocatioin)', width: 80, editor: { type: 'validatebox' } },
                { field: 'projectClass', title: '@Html.LabelFor(model => model.projectClass)', width: 90, formatter: unitformatterprojectClass, editor: { type: 'combobox', options: { data: projectClassCombList, valueField: "value", textField: "text" } } },
                { field: 'projectPro', title: '@Html.LabelFor(model => model.projectPro)', width: 120, formatter: unitformatterprojectPro, editor: { type: 'combobox', options: { data: projectProCombList, valueField: "value", textField: "text" } } },
                { field: 'officeDirect', title: '@Html.LabelFor(model => model.officeDirect)', width: 80, editor: { type: 'validatebox' } },
                { field: 'admin', title: '@Html.LabelFor(model => model.admin)', width: 80, editor: { type: 'validatebox' } },
                { field: 'projectManagement', title: '@Html.LabelFor(model => model.projectManagement)', width: 80, editor: { type: 'validatebox' } },
                { field: 'singleProjectName', title: '@Html.LabelFor(model => model.singleProjectName)', width: 80, editor: { type: 'validatebox' } },
                { field: 'outlineCost', title: '@Html.LabelFor(model => model.outlineCost)', width: 80, editor: { type: 'numberbox' } },
                { field: 'laborCost', title: '@Html.LabelFor(model => model.laborCost)', width: 80, editor: { type: 'numberbox' } },
                { field: 'materialsCost', title: '@Html.LabelFor(model => model.materialsCost)', width: 80, editor: { type: 'numberbox' } },
                { field: 'cooFlg', title: '@Html.LabelFor(model => model.cooFlg)', width: 80, editor: { type: 'validatebox' } },
                { field: 'cooCompany', title: '@Html.LabelFor(model => model.cooCompany)', width: 80, editor: { type: 'validatebox' } },
                { field: 'departmentName', title: '@Html.LabelFor(model => model.departmentName)', width: 80 }
            ]],
            toolbar: [
                {
                    text: '撤销', iconCls: 'fa fa-reply', handler: function () {
                        editRow = undefined;
                        $("#grid_list").datagrid('rejectChanges');
                        $("#grid_list").datagrid('unselectAll');
                    }
                },
            '-', {
                text: '上移', iconCls: 'fa fa-arrow-up', handler: function () {
                    MoveUp();
                }
            }, '-', {
                text: '下移', iconCls: 'fa fa-arrow-down', handler: function () {
                    MoveDown();
                }
            }],
            onAfterEdit: function (rowIndex, rowData, changes) {
                editRow = undefined;
            },
            onDblClickRow: function (rowIndex, rowData) {
                if (editRow != undefined) {
                    $("#grid_list").datagrid('endEdit', editRow);
                }

                if (editRow == undefined) {
                    $("#grid_list").datagrid('beginEdit', rowIndex);
                    editRow = rowIndex;
                }
            },
            onClickRow: function (rowIndex, rowData) {
                if (editRow != undefined) {
                    $("#grid_list").datagrid('endEdit', editRow);

                }

            }
        });
    });
    function MoveUp() {
        var row = $("#grid_list").datagrid('getSelected');
        var index = $("#grid_list").datagrid('getRowIndex', row);
        mysort(index, 'up', 'grid_list');

    }
    //下移
    function MoveDown() {
        var row = $("#grid_list").datagrid('getSelected');
        var index = $("#grid_list").datagrid('getRowIndex', row);
        mysort(index, 'down', 'grid_list');

    }

    function mysort(index, type, gridname) {
        if ("up" == type) {
            if (index != 0) {
                var toup = $('#' + gridname).datagrid('getData').rows[index];
                var todown = $('#' + gridname).datagrid('getData').rows[index - 1];
                $('#' + gridname).datagrid('getData').rows[index] = todown;
                $('#' + gridname).datagrid('getData').rows[index - 1] = toup;
                $('#' + gridname).datagrid('refreshRow', index);
                $('#' + gridname).datagrid('refreshRow', index - 1);
                $('#' + gridname).datagrid('selectRow', index - 1);
            }
        } else if ("down" == type) {
            var rows = $('#' + gridname).datagrid('getRows').length;
            if (index != rows - 1) {
                var todown = $('#' + gridname).datagrid('getData').rows[index];
                var toup = $('#' + gridname).datagrid('getData').rows[index + 1];
                $('#' + gridname).datagrid('getData').rows[index + 1] = todown;
                $('#' + gridname).datagrid('getData').rows[index] = toup;
                $('#' + gridname).datagrid('refreshRow', index);
                $('#' + gridname).datagrid('refreshRow', index + 1);
                $('#' + gridname).datagrid('selectRow', index + 1);
            }
        }

    }
    function Refresh() {
        $('#grid_list').datagrid('reload');
        editRow = undefined;
        $("#grid_list").datagrid('rejectChanges');
        $("#grid_list").datagrid('unselectAll');
    }
</script>
@Html.Partial("~/Views/Shared/_Partial_AutoGrid.cshtml")

@*operation*@
<script type="text/javascript">
    //ifram 返回
    function frameReturnByClose() {
        $("#modalwindow").window('close');
    }
    function frameReturnByReload(flag) {
        if (flag)
            $("#grid_list").datagrid('load');
        else
            $("#grid_list").datagrid('reload');
    }
    function frameReturnByMes(mes) {
        $.messageBox5s('@Resource.Tip', mes);
    }
    $(function () {
        $("#btnQuery").click(function () {
            var DepId = $("#DepId").val();
            var overStatus = $("#overStatusSelect").combobox('getValue');
            var projectPro = $("#projectPro").val();
            var admin = $("#admin").val();
            var projectManagement = $("#projectManagement").val();
            $("#grid_list").datagrid("load", { DepId: DepId, overStatus: overStatus, projectPro: projectPro, admin: admin, projectManagement: projectManagement });
        });
        $("#btnDelete").click(function () {
            var row = $('#grid_list').datagrid('getSelected');
            if (row != null) {
                $.messager.confirm('@Resource.Tip', '@Resource.YouWantToDeleteTheSelectedRecords', function (r) {
                    if (r) {
                        $.post("/LianTong_Project/Delete?id=" + row.Id, function (data) {
                            if (data.type == 1) {
                                $("#grid_list").datagrid('load');
                                $.messageBox5s('@Resource.Tip', data.message);
                            }
                            else {
                                $.messageBox5s('@Resource.Tip', data.message);
                            }

                        }, "json");

                    }
                });
            } else { $.messageBox5s('@Resource.Tip', '@Resource.PlaseChooseToOperatingRecords'); }
        });

        $("#btnSave").click(function () {
            $("#grid_list").datagrid('endEdit', editRow);
            var rows = $("#grid_list").datagrid('getChanges');
            var rowstr = JSON.stringify(rows);
            $.post('/LianTong_Project/CreatByGrid', rowstr, function (data) {
                $.messageBox5s('@Resource.Tip', data.message);
                if (data.type == 1)
                    $("#grid_list").datagrid('reload');
            }, "json");
        });
        $("#btnAdd").click(function () {
            if (editRow != undefined) {
                $("#grid_list").datagrid('endEdit', editRow);
            }
            if (editRow == undefined) {
                $("#grid_list").datagrid('insertRow', {
                    index: 0,
                    row: {}
                });

                $("#grid_list").datagrid('beginEdit', 0);
                editRow = 0;
            }
        });
    });
</script>