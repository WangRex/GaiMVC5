@using Apps.Web.Core;
@using Apps.Common;
@using Apps.Models.Sys;
@using Apps.Locale;
@model Apps.Models.LianTong.LianTong_ProjectContractsModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Index_Layout.cshtml";
    
    List<perm> perm = null;
}

<div class="mvctool">
<input id="txtQuery" type="text" class="searchText"/>
    @Html.ToolButton("btnQuery", "fa fa-search", "按部门查询", ref perm, "Query", true)
    @Html.ToolButton("btnAdd", "fa fa-plus", "添加", ref perm, "Create", true)
    @Html.ToolButton("btnSave", "fa fa-save", Resource.Save, ref perm, "Save", true)
    @Html.ToolButton("btnDelete", "fa fa-trash", Resource.Delete,ref perm, "Delete", true)
    @Html.ToolButton("btnRelate", "fa fa-user-plus","关联工程",ref perm, "Relate", true)
</div>
<div id="modalwindow" class="easyui-window" data-options="modal:true,closed:true,minimizable:false,shadow:false"></div>
<table id="grid_list"></table>
<div id="Pager"></div>
<script type="text/javascript">
    var departmentCombList = "";
    function unitformatterDep(value, rowData, rowIndex) {
        if (value == 0) {
            return;
        }
        for (var i = 0; i < departmentCombList.length; i++) {
            if (departmentCombList[i].Id == value) {
                return departmentCombList[i].Name;
            }
        }
    };
    $.ajax({
        type: "post",
        url: "/SysStruct/departmentJsonList",
        async: false,
        success: function (data) {
            departmentCombList = data;
        }
    });
    var projectClassCombList = [{ "value": "设备工程", "text": "设备工程" }, { "value": "线路工程", "text": "线路工程" }, { "value": "转化工程", "text": "转化工程" }, { "value": "驻地网工程", "text": "驻地网工程" }, { "value": "装维工程", "text": "装维工程" }, { "value": "市政工程", "text": "市政工程" }, { "value": "外揽工程", "text": "外揽工程" }, { "value": "移动工程", "text": "移动工程" }];
    var projectProCombList = [{ "value": "---设备工程---", "text": "---设备工程---" }, { "value": "电源专业工程", "text": "电源专业工程" }, { "value": "大客户传输工程", "text": "大客户传输工程" }, { "value": "集客工程", "text": "集客工程" }, { "value": "---线路工程---", "text": "---线路工程---" }, { "value": "主干光缆工程", "text": "主干光缆工程" }, { "value": "配线光缆工程", "text": "配线光缆工程" }, { "value": "管道光缆工程", "text": "管道光缆工程" }, { "value": "--移动工程---", "text": "---移动工程---" }, { "value": "设备工程", "text": "设备工程" }, { "value": "线路工程", "text": "线路工程" }];
    function unitformatterprojectClass(value, rowData, rowIndex) {
        if (value == 0) {
            return;
        }
        for (var i = 0; i < projectClassCombList.length; i++) {
            if (projectClassCombList[i].value == value) {
                return projectClassCombList[i].text;
            }
        }
    };
    function unitformatterprojectPro(value, rowData, rowIndex) {
        if (value == 0) {
            return;
        }
        for (var i = 0; i < projectProCombList.length; i++) {
            if (projectProCombList[i].value == value) {
                return projectProCombList[i].text;
            }
        }
    };
    var editRow = undefined;
    $(function () {
        $('#grid_list').datagrid({
            url: '/LianTong_ProjectContracts/GetList',
            width: SetGridWidthSub(10),
            methord: 'post',
            singleSelect: true,
            height: SetGridHeightSub(45),
            sortName: 'Id',
            sortOrder: 'desc',
            idField: 'Id',
            pageSize: 15,
            pageList: [15, 20, 30, 40, 50],
            pagination: true,
            striped: true,
            nowrap: false,
            columns: [[
                 { field: 'Id', title: '@Resource.TitleID', width: 25, hidden: true },
                { field: 'designName', title: '@Html.LabelFor(model => model.designName)', width: 80, editor: { type: 'validatebox' } },
                { field: 'designNum', title: '@Html.LabelFor(model => model.designNum)', width: 80, editor: { type: 'validatebox' } },
                { field: 'projectNum', title: '@Html.LabelFor(model => model.projectNum)', width: 80, editor: { type: 'validatebox' } },
                { field: 'contractNum', title: '@Html.LabelFor(model => model.contractNum)', width: 80, editor: { type: 'validatebox', options: { required: true } } },
                { field: 'orderNum', title: '@Html.LabelFor(model => model.orderNum)', width: 80, editor: { type: 'validatebox' } },
                { field: 'contractCost', title: '@Html.LabelFor(model => model.contractCost)', width: 80, editor: { type: 'numberbox' } },
                { field: 'ownerAdmin', title: '@Html.LabelFor(model => model.ownerAdmin)', width: 80, editor: { type: 'validatebox' } },
                { field: 'projectClass1', title: '@Html.LabelFor(model => model.projectClass1)', width: 90, formatter: unitformatterprojectClass, editor: { type: 'combobox', options: { data: projectClassCombList, valueField: "value", textField: "text" } } },
                { field: 'projectClass2', title: '@Html.LabelFor(model => model.projectClass2)', width: 120, formatter: unitformatterprojectPro, editor: { type: 'combobox', options: { data: projectProCombList, valueField: "value", textField: "text" } } },
                { field: 'viePrice', title: '@Html.LabelFor(model => model.viePrice)', width: 80, editor: { type: 'numberbox' } },
                { field: 'taxIncrease', title: '@Html.LabelFor(model => model.taxIncrease)', width: 80, editor: { type: 'numberbox' } },
                { field: 'taxPrice', title: '@Html.LabelFor(model => model.taxPrice)', width: 80, editor: { type: 'numberbox' } },
                { field: 'invoiceNum', title: '@Html.LabelFor(model => model.invoiceNum)', width: 80, editor: { type: 'validatebox' } },
                { field: 'invoiceDate', title: '@Html.LabelFor(model => model.invoiceDate)', width: 100, editor: { type: 'datebox' } },
                { field: 'validDate', title: '@Html.LabelFor(model => model.validDate)', width: 100, editor: { type: 'datebox' } },
                { field: 'department', title: '@Html.LabelFor(model => model.department)', width: 100, formatter: unitformatterDep, editor: { type: 'combobox', options: { data: departmentCombList, valueField: "Id", textField: "Name" } } }
            ]],
            toolbar: [{
                text: '撤销', iconCls: 'fa fa-reply', handler: function () {
                    editRow = undefined;
                    $("#grid_list").datagrid('rejectChanges');
                    $("#grid_list").datagrid('unselectAll');
                }
            },
            '-', {
                text: '上移', iconCls: 'fa fa-arrow-up', handler: function () {
                    MoveUp();
                }
            }, '-', {
                text: '下移', iconCls: 'fa fa-arrow-down', handler: function () {
                    MoveDown();
                }
            }],
            onAfterEdit: function (rowIndex, rowData, changes) {
                editRow = undefined;
            },
            onDblClickRow: function (rowIndex, rowData) {
                if (editRow != undefined) {
                    $("#grid_list").datagrid('endEdit', editRow);
                }

                if (editRow == undefined) {
                    $("#grid_list").datagrid('beginEdit', rowIndex);
                    editRow = rowIndex;
                }
            },
            onClickRow: function (rowIndex, rowData) {
                if (editRow != undefined) {
                    $("#grid_list").datagrid('endEdit', editRow);

                }

            }
        });
    });

    function MoveUp() {
        var row = $("#grid_list").datagrid('getSelected');
        var index = $("#grid_list").datagrid('getRowIndex', row);
        mysort(index, 'up', 'grid_list');

    }
    //下移
    function MoveDown() {
        var row = $("#grid_list").datagrid('getSelected');
        var index = $("#grid_list").datagrid('getRowIndex', row);
        mysort(index, 'down', 'grid_list');

    }

    function mysort(index, type, gridname) {
        if ("up" == type) {
            if (index != 0) {
                var toup = $('#' + gridname).datagrid('getData').rows[index];
                var todown = $('#' + gridname).datagrid('getData').rows[index - 1];
                $('#' + gridname).datagrid('getData').rows[index] = todown;
                $('#' + gridname).datagrid('getData').rows[index - 1] = toup;
                $('#' + gridname).datagrid('refreshRow', index);
                $('#' + gridname).datagrid('refreshRow', index - 1);
                $('#' + gridname).datagrid('selectRow', index - 1);
            }
        } else if ("down" == type) {
            var rows = $('#' + gridname).datagrid('getRows').length;
            if (index != rows - 1) {
                var todown = $('#' + gridname).datagrid('getData').rows[index];
                var toup = $('#' + gridname).datagrid('getData').rows[index + 1];
                $('#' + gridname).datagrid('getData').rows[index + 1] = todown;
                $('#' + gridname).datagrid('getData').rows[index] = toup;
                $('#' + gridname).datagrid('refreshRow', index);
                $('#' + gridname).datagrid('refreshRow', index + 1);
                $('#' + gridname).datagrid('selectRow', index + 1);
            }
        }

    }
    function Refresh() {
        $('#grid_list').datagrid('reload');
        editRow = undefined;
        $("#grid_list").datagrid('rejectChanges');
        $("#grid_list").datagrid('unselectAll');
    }
</script>
@Html.Partial("~/Views/Shared/_Partial_AutoGrid.cshtml")

@*operation*@
<script type="text/javascript">
    //ifram 返回
    function frameReturnByClose() {
        $("#modalwindow").window('close');
    }
    function frameReturnByReload(flag) {
        if (flag)
            $("#grid_list").datagrid('load');
        else
            $("#grid_list").datagrid('reload');
    }
    function frameReturnByMes(mes) {
        $.messageBox5s('@Resource.Tip', mes);
    }
    $(function () {
        $("#btnQuery").click(function () {
            var queryStr = $("#txtQuery").val();
            $("#grid_list").datagrid("load", { queryStr: queryStr });
        });
        $("#btnDelete").click(function () {
            var row = $('#grid_list').datagrid('getSelected');
            if (row != null) {
                $.messager.confirm('@Resource.Tip', '@Resource.YouWantToDeleteTheSelectedRecords', function (r) {
                    if (r) {
                        $.post("/LianTong_ProjectContracts/Delete?id=" + row.Id, function (data) {
                            if (data.type == 1) {
                                $("#grid_list").datagrid('load');
                                $.messageBox5s('@Resource.Tip', data.message);
                            }
                            else
                            {
                                $.messageBox5s('@Resource.Tip', data.message);
                            }

                        }, "json");

                    }
                });
            } else {$.messageBox5s('@Resource.Tip','@Resource.PlaseChooseToOperatingRecords'); }
        });
        $("#btnRelate").click(function () {
            var row = $('#grid_list').datagrid('getSelected');
           if (row != null) {
               $("#modalwindow").html("<iframe width='100%'  height='100%' scrolling='auto' frameborder='0' src='/LianTong/LianTong_ProjectContracts/ProjectsBindingPage?ContractsId=" + row.Id + "&Iedate=" + GetGuid() + "'></iframe>");
               $("#modalwindow").window({ title: '关联工程', width: 760, height: 400, iconCls: 'fa fa-pencil' }).window('open');
           } else { $.messageBox5s('@Resource.Tip', '@Resource.PlaseChooseToOperatingRecords'); }
        });
        $("#btnSave").click(function () {
            $("#grid_list").datagrid('endEdit', editRow);
            var rows = $("#grid_list").datagrid('getChanges');
            var rowstr = JSON.stringify(rows);
            $.post('/LianTong_ProjectContracts/CreatByGrid', rowstr, function (data) {
                $.messageBox5s('@Resource.Tip', data.message);
                if (data.type == 1)
                    $("#grid_list").datagrid('reload');
            }, "json");
        });
        $("#btnAdd").click(function () {
            if (editRow != undefined) {
                $("#grid_list").datagrid('endEdit', editRow);
            }
            if (editRow == undefined) {
                $("#grid_list").datagrid('insertRow', {
                    index: 0,
                    row: {}
                });

                $("#grid_list").datagrid('beginEdit', 0);
                editRow = 0;
            }
        });
    });
</script>