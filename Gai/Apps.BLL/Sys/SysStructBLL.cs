//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 2012-12-11 22:12:12 by App
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Practices.Unity;
using Apps.Models;
using Apps.Common;
using Apps.BLL.Core;
using Apps.Models.Sys;
using Apps.Locale;
using Apps.DAL.Sys;
using System.Text;

namespace Apps.BLL.Sys
{
    public partial class SysStructBLL
    {
        public SysStructRepository m_Rep;
        public SysUserRepository sysUserRepository;
        public SysStructBLL()
        {
            m_Rep = new SysStructRepository();
            sysUserRepository = new SysUserRepository();
        }

        #region 获取多选不带人员的组织架构
        public string GetStructMulTree()
        {
            StringBuilder sb = new StringBuilder();
            IQueryable<SysStruct> queryData = m_Rep.FindList();
            IQueryable<SysStruct> query = queryData.Where(a => a.ParentId == "0").OrderBy(a => a.Sort);
            sb.Append("<ul id=\"StructMulTree\" class=\"easyui-tree\"  data-options=\"checkbox:true\">");
            foreach (var l in query)
            {
                sb.Append("<li data-options=\"attributes:{'id':'" + l.Id + "'}\">");
                sb.AppendFormat("<span>{0}</span>", l.Name);
                sb.Append(GetStructLayout(queryData, l.Id.ToString(), false));
                sb.Append("</li>");
            }
            sb.Append("</ul>");
            return sb.ToString();
        }
        #endregion


        #region 组织架构
        public string GetStructTree(bool isCount)
        {
            StringBuilder sb = new StringBuilder();
            IQueryable<SysStruct> queryData = m_Rep.FindList();
            IQueryable<SysStruct> query = queryData.Where(a => a.ParentId == "0").OrderBy(a => a.Sort);
            sb.Append("<ul id=\"StructTree\" class=\"easyui-tree\"  data-options=\"onClick:function(node){ getSelected();}\">");
            foreach (var l in query)
            {
                sb.Append("<li data-options=\"attributes:{'id':'" + l.Id + "'}\">");
                if (isCount)
                {
                    sb.AppendFormat("<span>{0} ({1})</span>", l.Name, GetMemberCount(l.Id.ToString()));
                }
                else
                {
                    sb.AppendFormat("<span>{0}</span>", l.Name);
                }
                sb.Append(GetStructLayout(queryData, l.Id.ToString(), isCount));
                sb.Append("</li>");
            }
            sb.Append("</ul>");

            return sb.ToString();
        }

        #endregion

        public int GetMemberCount(string depId)
        {
            return sysUserRepository.FindList(a => a.DepId == depId).Count();
        }
        public string GetStructLayout(IQueryable<SysStruct> queryData, string parentId, bool isCount)
        {
            IQueryable<SysStruct> query = queryData.Where(a => a.ParentId == parentId).OrderBy(a => a.Sort);
            StringBuilder sb = new StringBuilder();
            if (query.Count() > 0)
            {

                sb.Append("<ul>");
                foreach (var r in query)
                {
                    sb.Append("<li data-options=\"attributes:{'id':'" + r.Id + "'}\">");
                    if (isCount)
                    {
                        sb.AppendFormat("<span>{0} ({1})</span>", r.Name, GetMemberCount(r.Id.ToString()));
                    }
                    else
                    {
                        sb.AppendFormat("<span>{0}</span>", r.Name);
                    }
                    sb.Append(GetStructLayout(queryData, r.Id.ToString(), isCount));
                    sb.Append("</li>");
                }
                sb.Append("</ul>");
            }
            return sb.ToString();
        }
        public List<SysStruct> departmentComboxData()
        {
            List<SysStruct> _tree = new List<SysStruct>();
            _tree.Add(new SysStruct() { Id = 0, ParentId = "0", Name = "" });
            IQueryable<SysStruct> _SysStruct = m_Rep.FindList();
            var ItemList = _SysStruct.Select(s => new
            {
                ListId = s.Id,
                ListText = s.Name
            }).Distinct();
            Dictionary<string, int> _IDList = new Dictionary<string, int>();
            foreach (var _list in ItemList)
            {
                if (!_IDList.ContainsKey(_list.ListText))
                {
                    if (!string.IsNullOrEmpty(_list.ListText))
                    {
                        _IDList.Add(_list.ListText, 0);
                        _tree.Add(new SysStruct() { Id = _list.ListId, ParentId = "0", Name = _list.ListText });
                    }
                }
            }

            return _tree;
        }
    }
}